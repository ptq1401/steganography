# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'decode.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import cv2
from LSBSteg import LSBSteg
from tqdm import tqdm
class Ui_Decoding(object):
    def setupUi(self, Decoding):
        Decoding.setObjectName("Decoding")
        Decoding.resize(1300, 800)
        Decoding.setMinimumSize(QtCore.QSize(1300, 800))
        Decoding.setMaximumSize(QtCore.QSize(1300, 800))
        Decoding.setStyleSheet("background: rgb(240, 240, 240)")
        Decoding.setLocale(QtCore.QLocale(QtCore.QLocale.Vietnamese, QtCore.QLocale.Vietnam))
        self.centralwidget = QtWidgets.QWidget(Decoding)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(40, 20, 520, 35))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background: rgb(255, 255, 255)")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(570, 20, 100, 35))
        self.pushButton.setStyleSheet("background: rgb(255, 255, 255)")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(1160, 20, 100, 35))
        self.pushButton_2.setStyleSheet("background: rgb(255, 255, 255)")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(1030, 20, 100, 35))
        self.pushButton_3.setStyleSheet("background: rgb(255, 255, 255)")
        self.pushButton_3.setObjectName("pushButton_3")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(40, 90, 1220, 680))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.listWidget.setFont(font)
        self.listWidget.setStyleSheet("background: rgb(255, 255, 255)")
        self.listWidget.setObjectName("listWidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 60, 501, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        Decoding.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Decoding)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1300, 26))
        self.menubar.setObjectName("menubar")
        Decoding.setMenuBar(self.menubar)
        self.but_choose_folder = 'OFF'
        self.pushButton.clicked.connect(self.folder_path)
        self.pushButton_3.clicked.connect(self.continue_but)

        self.retranslateUi(Decoding)
        QtCore.QMetaObject.connectSlotsByName(Decoding)

    def folder_path(self):
        self.folder_name = QtWidgets.QFileDialog.getExistingDirectory(None, "Select choose folder")
        self.lineEdit.setText(self.folder_name)
        self.but_choose_folder = 'ON'
        if os.path.isdir(self.folder_name):
            list = os.listdir(self.folder_name)
            number_files = len(list)
            self.listWidget.addItem('There are ' + str(number_files) + ' images in the folder')

    def continue_but(self):
        if self.but_choose_folder != 'ON':
            self.listWidget.addItem('Please choose image folder. . .')
            return
        self.listWidget.addItem('. . . . . . . . . . . . . .')
        folder_path = os.path.split(self.folder_name)
        name_file = "mess_decode.txt"
        new_file_path = os.path.join(folder_path[0],name_file)
        with open(new_file_path,'w',encoding = 'utf-8') as f:
            for file in tqdm(os.listdir(self.folder_name)):
                imagesteg_path= os.path.join(self.folder_name,file)
                im = cv2.imread(imagesteg_path)
                steg = LSBSteg(im)
                message = steg.decode_text()
                self.listWidget.addItem('Message in ' + file + ':')
                self.listWidget.addItem(message)
                f.write(message)
        self.listWidget.addItem('. . . . . . . . . . . . . .')
        self.listWidget.addItem('A file has been created: ' + folder_path[0] + "/" + name_file)
        self.listWidget.addItem('Finished')

    def retranslateUi(self, Decoding):
        _translate = QtCore.QCoreApplication.translate
        Decoding.setWindowTitle(_translate("Decoding", "Decoding"))
        self.pushButton.setText(_translate("Decoding", "Select folder"))
        self.pushButton_2.setText(_translate("Decoding", "Back"))
        self.pushButton_3.setText(_translate("Decoding", "Continue"))
        self.label.setText(_translate("Decoding", "Select the folder containing the images to be decoded (required)"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Decoding = QtWidgets.QMainWindow()
    ui = Ui_Decoding()
    ui.setupUi(Decoding)
    Decoding.show()
    sys.exit(app.exec_())
